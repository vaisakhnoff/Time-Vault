<%- include("../../views/partials/user/header") %>

<style>
  .address-form-container {
    margin-top: 150px;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #fff;
  }
  
  .address-form-container h3 {
    text-align: center;
    margin-bottom: 20px;
  }
  
  .form-group {
    margin-bottom: 15px;
  }
  
  .form-group label {
    display: block;
    font-weight: bold;
  }
  
  .form-control {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  .btn-primary {
    background-color: #007bff;
    border: none;
    padding: 10px 20px;
    color: #fff;
    cursor: pointer;
    border-radius: 4px;
  }

  .is-invalid {
    border-color: #dc3545 !important;
}

.invalid-feedback {
    color: #dc3545;
    font-size: 0.875rem;
    margin-top: 0.25rem;
    display: block;
}

select.form-control {
    appearance: auto;
    -webkit-appearance: auto;
    -moz-appearance: auto;
}
</style>

<div class="container address-form-container">
  <h3>Edit Address</h3>
  <form id="updateAddressForm">
    <!-- Hidden field for address ID and context -->
    <input type="hidden" name="addressId" value="<%= address._id %>">
    <input type="hidden" name="from" value="<%= typeof from !== 'undefined' ? from : '' %>">

    <div class="form-group">
      <label for="name">Name</label>
      <input 
        type="text" 
        id="name" 
        name="name" 
        class="form-control" 
        value="<%= address.name %>" 
        required>
    </div>
    
    <div class="form-group">
      <label for="addressType">Address Type</label>
      <select id="addressType" name="addressType" class="form-control" required>
        <option value="home" <%= address.addressType.toLowerCase() === 'home' ? 'selected' : '' %>>Home</option>
        <option value="work" <%= address.addressType.toLowerCase() === 'work' ? 'selected' : '' %>>Work</option>
        <option value="other" <%= address.addressType.toLowerCase() === 'other' ? 'selected' : '' %>>Other</option>
      </select>
    </div>
    
    <div class="form-group">
      <label for="city">City</label>
      <input 
        type="text" 
        id="city" 
        name="city" 
        class="form-control" 
        value="<%= address.city %>" 
        required>
    </div>
    
    <div class="form-group">
      <label for="landMark">Landmark</label>
      <input 
        type="text" 
        id="landMark" 
        name="landMark" 
        class="form-control" 
        value="<%= address.landMark %>" 
        required>
    </div>
    
    <div class="form-group">
      <label for="state">State</label>
      <input 
        type="text" 
        id="state" 
        name="state" 
        class="form-control" 
        value="<%= address.state %>" 
        required>
    </div>
    
    <div class="form-group">
      <label for="pincode">Pincode</label>
      <input 
        type="text" 
        id="pincode" 
        name="pincode" 
        class="form-control" 
        value="<%= address.pincode %>" 
        required>
    </div>
    
    <div class="form-group">
      <label for="phone_no">Phone Number</label>
      <input 
        type="text" 
        id="phone_no" 
        name="phone_no" 
        class="form-control" 
        value="<%= address.phone_no %>" 
        required>
    </div>
    
    <div class="form-group">
      <label for="altPhone_no">Alternative Phone Number</label>
      <input 
        type="text" 
        id="altPhone_no" 
        name="altPhone_no" 
        class="form-control" 
        value="<%= address.altPhone_no %>" 
        required>
    </div>
    
    <button type="submit" class="btn btn-primary">Update Address</button>
  </form>
</div>

<!-- Include SweetAlert -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('updateAddressForm');
    
    // Validation patterns
    const patterns = {
        name: /^[a-zA-Z\s]{2,50}$/,
        addressType: /^(home|work|other)$/i,
        city: /^[a-zA-Z\s]{2,50}$/,
        landMark: /^.{3,100}$/,
        state: /^[a-zA-Z\s]{2,50}$/,
        pincode: /^\d{6}$/,
        phone_no: /^\d{10}$/,
        altPhone_no: /^\d{10}$/
    };

    // Error messages
    const errorMessages = {
        name: 'Name should be 2-50 characters long and contain only letters',
        addressType: 'Address type must be home, work, or other',
        city: 'City should be 2-50 characters long and contain only letters',
        landMark: 'Landmark should be 3-100 characters long',
        state: 'State should be 2-50 characters long and contain only letters',
        pincode: 'Pincode should be exactly 6 digits',
        phone_no: 'Phone number should be exactly 10 digits',
        altPhone_no: 'Alternative phone number should be exactly 10 digits'
    };

    // Add input event listeners for real-time validation
    Object.keys(patterns).forEach(field => {
        const input = document.getElementById(field);
        if (input) {
            input.addEventListener('input', function() {
                validateField(this, patterns[field], errorMessages[field]);
            });
        }
    });

    // Form submission handler
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        let isValid = true;
        const formData = new FormData(this);
        const formObject = Object.fromEntries(formData.entries());

        // Validate all fields
        for (const [field, pattern] of Object.entries(patterns)) {
            const value = formData.get(field);
            if (!pattern.test(value)) {
                isValid = false;
                showError(document.getElementById(field), errorMessages[field]);
            }
        }

        // Check if phone numbers are different
        if (formData.get('phone_no') === formData.get('altPhone_no')) {
            isValid = false;
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                text: 'Primary and alternative phone numbers cannot be same'
            });
            return;
        }

        if (isValid) {
            try {
                const response = await fetch('/updateAddress', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formObject)
                });

                const result = await response.json();

                Swal.fire({
                    icon: result.status === 'success' ? 'success' : 'error',
                    title: result.status === 'success' ? 'Success' : 'Error',
                    text: result.message,
                    confirmButtonText: 'OK'
                }).then(() => {
                    if (result.status === 'success') {
                        if (formObject.from === 'checkoutPage') {
                            window.location.href = '/checkoutPage';
                        } else {
                            window.location.href = '/userAddress';
                        }
                    }
                });
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong. Please try again.',
                    confirmButtonText: 'OK'
                });
            }
        }
    });

    // Helper function to validate individual fields
    function validateField(input, pattern, errorMessage) {
        const isValid = pattern.test(input.value);
        if (!isValid) {
            showError(input, errorMessage);
        } else {
            clearError(input);
        }
        return isValid;
    }

    // Helper function to show error
    function showError(input, message) {
        clearError(input);
        input.classList.add('is-invalid');
        const errorDiv = document.createElement('div');
        errorDiv.className = 'invalid-feedback';
        errorDiv.textContent = message;
        input.parentNode.appendChild(errorDiv);
    }

    // Helper function to clear error
    function clearError(input) {
        input.classList.remove('is-invalid');
        const errorDiv = input.parentNode.querySelector('.invalid-feedback');
        if (errorDiv) {
            errorDiv.remove();
        }
    }
});
</script>

<%- include("../../views/partials/user/footer") %>
