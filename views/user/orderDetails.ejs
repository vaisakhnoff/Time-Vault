<%- include("../../views/partials/user/header") %>
<style>
.order-timeline {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f8f9fa;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.timeline-container {
  position: relative;
}

.timeline {
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: relative;
}

.timeline::before {
  content: '';
  position: absolute;
  width: 100%;
  height: 4px;
  background-color: #e0e0e0;
  top: 50%;
  left: 0;
  transform: translateY(-50%);
  z-index: 1;
}

.timeline-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 25%;
  position: relative;
  z-index: 2;
}

.timeline-item.active .timeline::before {
  background: linear-gradient(to right, #4CAF50 0%, #4CAF50 100%);
}

.timeline-icon {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 10px;
  background-color: #e0e0e0;
  transition: all 0.3s ease;
}

.timeline-item.active .timeline-icon {
  background-color: #4CAF50;
  box-shadow: 0 0 0 10px rgba(76, 175, 80, 0.2);
}

.timeline-icon i {
  font-size: 24px;
}

.timeline-content {
  text-align: center;
}

.timeline-content h5 {
  margin: 0;
  font-weight: bold;
  color: #6c757d;
}

.timeline-item.active .timeline-content h5 {
  color: #4CAF50;
}

.timeline-content p {
  margin: 5px 0 0;
  font-size: 0.8rem;
}

@media (max-width: 768px) {
  .timeline {
    flex-direction: column;
  }
  
  .timeline::before {
    width: 4px;
    height: 100%;
    left: 30px;
    top: 0;
  }
  
  .timeline-item {
    width: 100%;
    flex-direction: row;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .timeline-icon {
    margin-right: 15px;
    margin-bottom: 0;
  }
  
  .timeline-content {
    text-align: left;
  }
}

.item-timeline {
  border-bottom: 1px solid #eee;
  padding-bottom: 20px;
  margin-bottom: 20px;
}

.item-timeline:last-child {
  border-bottom: none;
  padding-bottom: 0;
}

.timeline {
  display: flex;
  justify-content: space-between;
  position: relative;
  margin: 20px 0;
}

.timeline::before {
  content: '';
  position: absolute;
  width: 100%;
  height: 2px;
  background-color: #e0e0e0;
  top: 50%;
  transform: translateY(-50%);
  z-index: 1;
}

.timeline-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  position: relative;
  z-index: 2;
}

.timeline-item.active .timeline-icon {
  background-color: #28a745;
  color: white;
}

.timeline-icon {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background-color: #f8f9fa;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 8px;
  border: 2px solid #e0e0e0;
}

.timeline-content {
  text-align: center;
}

.timeline-content h5 {
  font-size: 0.9rem;
  margin: 0;
}

.timeline-content p {
  font-size: 0.8rem;
  color: #6c757d;
  margin: 0;
}

/* Add this to your existing styles */
.swal2-popup {
    padding: 1.5rem;
}

.swal2-popup .swal2-title {
    font-size: 1.5rem;
    margin-bottom: 1rem;
}

.swal2-popup #return-reason {
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
    padding: 0.5rem;
    font-size: 1rem;
    width: 100%;
    margin-top: 0.5rem;
}

.swal2-popup .swal2-actions {
    margin-top: 1.5rem;
}

.swal2-popup .swal2-confirm,
.swal2-popup .swal2-cancel {
    padding: 0.5rem 1.5rem;
    font-size: 1rem;
    border-radius: 0.25rem;
}

swal2-popup label {
    text-align: left;
    display: block;
    font-weight: 500;
    color: #333;
}
</style>
<!-- Spacer to create gap between header and contents -->
<div style="height: 100px;"></div>

<div class="container mt-5 mb-5">
  <div class="card">
    <div class="card-header">
      <div class="d-flex justify-content-between align-items-center">
        <h3>Order Details #<%= order.orderId %></h3>
      </div>
    </div>

    <div class="card-body">
      <!-- Order Status Timeline -->
      <div class="order-timeline mb-4">
        <div class="timeline-container">
          <% 
                     const allItemsSameStatus = order.items.every(item => item.status === order.items[0].status);
            const currentStatus = order.items[0].status;
            
            let timelineSteps;
            if (['Return Requested', 'Returned', 'Return Declined', 'Cancelled'].includes(currentStatus)) {
              // Only show the special status
              timelineSteps = [currentStatus];
            } else {
              timelineSteps = getTimelineSteps(currentStatus);
            }
          %>
          <% if (allItemsSameStatus) { %>
            <div class="timeline">
              <% timelineSteps.forEach((step, index) => { %>
                <div class="timeline-item <%= index <= timelineSteps.indexOf(currentStatus) ? 'active' : '' %>">
                  <div class="timeline-icon">
                    <i class="fas fa-<%= 
                      step === 'Pending' ? 'clock' :
                      step === 'Shipped' ? 'truck' :
                      step === 'Out for Delivery' ? 'shipping-fast' :
                      step === 'Delivered' ? 'check' :
                      step === 'Cancelled' ? 'times' :
                      step === 'Return Requested' ? 'undo' :
                      step === 'Returned' ? 'box' :
                      step === 'Return Declined' ? 'ban' :
                      'circle' %>">
                    </i>
                  </div>
                  <div class="timeline-content">
                    <h5><%= step %></h5>
                    <% if (order.statusUpdates && order.statusUpdates[step]) { %>
                      <p><%= new Date(order.statusUpdates[step]).toLocaleString() %></p>
                    <% } %>
                  </div>
                </div>
              <% }); %>
            </div>
          <% } else { %>
            <% order.items.forEach((item) => { %>
              <div class="item-timeline mb-4">
                <h6 class="mb-3"><%= item.productId.productName %></h6>
                <div class="timeline">
                  <%
                    let itemSteps;
                    if (['Return Requested', 'Returned', 'Return Declined', 'Cancelled'].includes(item.status)) {
                      itemSteps = [item.status];
                    } else {
                      itemSteps = getTimelineSteps(item.status);
                    }
                    const itemCurrentStep = itemSteps.indexOf(item.status);
                  %>
                  <% itemSteps.forEach((step, index) => { %>
                    <div class="timeline-item <%= index <= itemCurrentStep ? 'active' : '' %>">
                      <div class="timeline-icon">
                        <i class="fas fa-<%= 
                          step === 'Pending' ? 'clock' :
                          step === 'Shipped' ? 'truck' :
                          step === 'Out for Delivery' ? 'shipping-fast' :
                          step === 'Delivered' ? 'check' :
                          step === 'Cancelled' ? 'times' :
                          step === 'Return Requested' ? 'undo' :
                          step === 'Returned' ? 'box' :
                          step === 'Return Declined' ? 'ban' :
                          'circle' %>"
                          style="color: <%= 
                            step === 'Cancelled' ? '#dc3545' :
                            step === 'Return Requested' ? '#ffc107' :
                            step === 'Returned' ? '#17a2b8' :
                            step === 'Return Declined' ? '#dc3545' :
                            index <= itemCurrentStep ? '#28a745' : '#6c757d'
                          %>">
                        </i>
                      </div>
                      <div class="timeline-content">
                        <h5><%= step %></h5>
                        <% if (order.statusUpdates && order.statusUpdates[`item-${item._id}-${step}`]) { %>
                          <p><%= new Date(order.statusUpdates[`item-${item._id}-${step}`]).toLocaleString() %></p>
                        <% } %>
                      </div>
                    </div>
                  <% }); %>
                </div>
              </div>
            <% }); %>
          <% } %>
        </div>
      </div>

      <!-- Order Items -->
      <div class="order-items mb-4">
        <h4>Items</h4>
        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Product</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% order.items.forEach(item => { %>
                <tr>
                  <td>
                    <div class="d-flex align-items-center">
                      <img src="/uploads/product-images/<%= item.productId.productImage[0] %>" 
                           alt="<%= item.productId.productName %>"
                           style="width: 50px; height: 50px; object-fit: cover;">
                      <span class="ms-2"><%= item.productId.productName %></span>
                    </div>
                  </td>
                  <td>₹<%= item.price %></td>
                  <td><%= item.quantity %></td>
                  <td>₹<%= item.price * item.quantity %></td>
                  <td>
                    <div class="order-actions">
                      <% if (order.orderStatus === 'Pending' && (!item.status || item.status === 'Pending')) { %>
                        <button class="btn btn-sm btn-danger"
                                onclick="cancelOrderItem('<%= order._id %>', '<%= item._id %>')">
                          Cancel Item
                        </button>
                      <% } %>

                      <% if (order.orderStatus === 'Delivered' && 
                             item.status === 'Delivered' && 
                             !['Returned', 'Return Requested', 'Return Declined'].includes(item.status)) { %>
                        <button class="btn btn-sm btn-warning"
                                onclick="returnOrderItem('<%= order._id %>', '<%= item._id %>')">
                          Return
                        </button>
                      <% } %>

                      <% if (order.orderStatus === 'Delivered' && !item.reviewed && item.status !== 'Return Requested' && item.status !== 'Returned') { %>
                        <a href="/review?orderId=<%= order._id %>&productId=<%= item.productId._id %>" 
                           class="btn btn-sm btn-primary">
                          Write Review
                        </a>
                      <% } %>

                      <% if (item.status) { %>
                        <span class="badge bg-<%= 
                          item.status === 'Cancelled' ? 'danger' : 
                          item.status === 'Return Requested' ? 'warning' : 
                          item.status === 'Returned' ? 'info' : 
                          item.status === 'Return Declined' ? 'danger' :
                          item.status === 'Delivered' ? 'success' :
                          'primary' %>">
                          <%= item.status %>
                        </span>
                      <% } %>
                    </div>
                  </td>
                </tr>
              <% }) %>
            </tbody>
          </table>
        </div>
      </div>

      <!-- Order Summary -->
      <div class="row">
        <div class="col-md-6">
          <div class="shipping-address">
            <h4>Shipping Address</h4>
            <p>
              <%= address.name %><br>
              <%= address.addressType %><br>
              <%= address.city %>, <%= address.state %><br>
              PIN: <%= address.pincode %><br>
              Phone: <%= address.phone_no %>
            </p>
          </div>
        </div>
        <div class="col-md-6">
          <div class="order-summary">
            <h4>Payment Summary</h4>
            <table class="table table-borderless">
              <tr>
                <td>Subtotal:</td>
                <td class="text-end">₹<%= order.totalAmount %></td>
              </tr>
              <tr>
                <td>Shipping:</td>
                <td class="text-end">₹<%= order.shippingCost || 0 %></td>
              </tr>
              <tr>
                <td><strong>Total:</strong></td>
                <td class="text-end"><strong>₹<%= order.totalAmount + (order.shippingCost || 0) %></strong></td>
              </tr>
            </table>
          </div>
        </div>
      </div>

    </div>
  </div>
</div>

<!-- Review Modal -->
<div class="modal fade" id="reviewModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Write a Review</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form action="/submitReview" method="POST">
        <div class="modal-body">
          <input type="hidden" name="productId" id="reviewProductId">
          <input type="hidden" name="orderId" value="<%= order._id %>">
          
          <div class="mb-3">
            <label>Rating</label>
            <div class="rating">
              <% for(let i=5; i>=1; i--) { %>
                <input type="radio" name="rating" value="<%= i %>" id="star<%= i %>">
                <label for="star<%= i %>">☆</label>
              <% } %>
            </div>
          </div>
          
          <div class="mb-3">
            <label>Review</label>
            <textarea name="review" class="form-control" rows="3" required></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn btn-primary">Submit Review</button>
        </div>
      </form>
    </div>
  </div>
</div>

<style>
  /* New CSS for order actions */
  .order-actions {
    display: flex;
    flex-wrap: wrap;   /* Allows items to wrap on smaller screens */
    gap: 0.5rem;       /* Adjust the gap between buttons/badges */
    align-items: center;
  }
  
  /* Adjust rating styles if needed */
  .rating {
    display: flex;
    flex-direction: row-reverse;
    justify-content: flex-end;
  }
  .rating input {
    display: none;
  }
  .rating label {
    cursor: pointer;
    font-size: 25px;
    color: #ddd;
    padding: 5px;
  }
  .rating input:checked ~ label,
  .rating label:hover,
  .rating label:hover ~ label {
    color: #ffd700;
  }
</style>

<script>
  function openReviewModal(productId) {
    document.getElementById('reviewProductId').value = productId;
    new bootstrap.Modal(document.getElementById('reviewModal')).show();
  }

  function cancelOrderItem(orderId, itemId) {
    Swal.fire({
      title: 'Are you sure?',
      text: "Cancel only this item? The refund will be credited instantly.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Yes, cancel it!'
    }).then(result => {
      if (result.isConfirmed) {
        fetch('/order/cancelItem', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            orderId: orderId,  // This will now be the UUID
            itemId: itemId, 
            reason: "Cancelled by user" 
          })
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Cancelled',
              text: data.message
            }).then(() => {
              // Force reload to show updated status
              window.location.reload();
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: data.message
            });
          }
        })
        .catch(error => {
          console.error(error);
          Swal.fire('Error', 'Failed to cancel item', 'error');
        });
      }
    });
  }

  function returnOrderItem(orderId, itemId) {
    Swal.fire({
        title: 'Return Request',
        html: `
            <div class="form-group">
                <label for="return-reason" class="mb-2">Please provide a reason for return:</label>
                <textarea id="return-reason" class="form-control" 
                    rows="4" placeholder="Enter your reason here..."
                    style="resize: none; margin-top: 10px;"></textarea>
            </div>
        `,
        showCancelButton: true,
        confirmButtonText: 'Submit Return Request',
        cancelButtonText: 'Cancel',
        confirmButtonColor: '#28a745',
        cancelButtonColor: '#dc3545',
        width: '32em',
        preConfirm: () => {
            const reason = document.getElementById('return-reason').value;
            if (!reason.trim()) {
                Swal.showValidationMessage('Please enter a return reason');
                return false;
            }
            return reason;
        }
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/order/returnItem', {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({ 
                    orderId: orderId,
                    itemId: itemId,
                    reason: result.value
                })
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => Promise.reject(err));
                }
                return response.json();
            })
            .then(data => {
                Swal.fire({
                    icon: data.success ? 'success' : 'error',
                    title: data.success ? 'Return Request Submitted' : 'Error',
                    text: data.message,
                    confirmButtonColor: '#28a745'
                }).then(() => {
                    if (data.success) {
                        window.location.reload();
                    }
                });
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Return Request Failed',
                    text: error.message || 'Unable to process your return request. Please try again.',
                    confirmButtonColor: '#dc3545'
                });
            });
        }
    });
  }

  // In admin updateOrderStatus (when newStatus is 'Delivered')
  if (newStatus === 'Delivered') {
    order.items.forEach(item => {
      // Update item status unless it is already final (Cancelled, etc.)
      if (!['Cancelled', 'Returned', 'Return Requested', 'Return Declined'].includes(item.status)) {
        item.status = 'Delivered';
      }
    });
  }
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<%- include("../../views/partials/user/footer") %>


