<%- include("../../views/partials/admin/header") %>
<head>
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"
  />
  <style>
    .pagination {
        display: flex;
        justify-content: center;
        gap: 5px;
    }

    .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
    }

    .page-link {
        color: #007bff;
        padding: 8px 16px;
        border-radius: 4px;
    }

    .page-link:hover {
        background-color: #e9ecef;
        border-color: #dee2e6;
        color: #0056b3;
    }

    .text-muted {
        color: #6c757d;
    }
    /* Add to existing styles */
.table {
  table-layout: fixed;
}

.table td {
  vertical-align: middle;
  word-wrap: break-word;
}

.badge {
  font-size: 0.85em;
  padding: 0.35em 0.65em;
}

.btn-sm {
  padding: 0.25rem 0.5rem;
  font-size: 0.875rem;
  line-height: 1.5;
  border-radius: 0.2rem;
}

/* Standardize button sizes */
.action-btn {
    width: 100px !important;
    margin: 2px;
    display: inline-block;
    text-align: center;
}

.btn-group-action {
    display: flex;
    gap: 4px;
    justify-content: flex-start;
    flex-wrap: wrap;
}
</style>
</head>

<!-- Top row: Title & Add Product button -->
<div class="content-header d-flex justify-content-between align-items-center px-4 py-3">
  <h2 class="content-title card-title mb-0">Products</h2>
  <a href="/admin/addProducts" class="btn btn-primary btn-sm">Add Product</a>
</div>

<!-- Old-style search bar -->
<header class="card-header text-center mb-20">
  
  <form action="" method="get" class="d-inline">
    <div class="input-group input-group-sm border border-1 border-grey rounded-pill" style="width: 500px; margin-left: 230px;">
      <input
        type="text"
        class="form-control border-0 rounded-pill"
        placeholder="Search products or brands"
        name="search"
      />
      <button class="btn border-0" type="submit">Search</button>
    </div>
  </form>
  
</header>

<!-- Table of Products -->
<div class="px-4 mt-3">
  <div class="card shadow-sm">
    <div class="card-body p-0">
      <table class="table table-striped mb-0">
        <thead>
         
       
       <!-- Corrected table header -->
<thead>
  <tr>
    <th>Product name</th>
    <th>Brand</th>
    <th>Category</th>
    <th>Regular Price</th>
    <th>Sale Price</th>
    <th>Offer</th>
    <th>Quantity</th>
    <th style="width: 180px;">Action</th>
    <th style="width: 100px;">Edit</th>
  </tr>
</thead>

<!-- Corrected table body -->
<tbody>
  <% products.forEach(function(product) { %>
    <tr data-product-id="<%= product._id %>">
      <td><%= product.productName %></td>
      <td><%= product.brand ? product.brand.brandName : 'N/A' %></td>
      <td><%= product.category?.name || "Uncategorized" %></td>
      <td>₹<%= product.regularPrice %></td>
      <td data-price-type="sale">₹<%= product.salePrice %></td>
      <td id="offer-value-<%= product._id %>">
        <% if(product.category?.categoryOffer || product.brand?.brandOffer || product.productOffer) { %>
          <% if(product.category?.categoryOffer) { %>
            <span class="badge bg-info">Category: <%= product.category.categoryOffer %>%</span>
          <% } %>
          <% if(product.brand?.brandOffer) { %>
            <span class="badge bg-secondary">Brand: <%= product.brand.brandOffer %>%</span>
          <% } %>
          <% if(product.productOffer) { %>
            <span class="badge bg-success">Product: <%= product.productOffer %>%</span>
          <% } %>
          <!-- The applied discount in the UI can be calculated on the fly if needed -->
          <span class="badge bg-warning">Applied: <%= Math.max(product.category?.categoryOffer || 0, product.brand?.brandOffer || 0, product.productOffer || 0) %>%</span>
        <% } else { %>
          0%
        <% } %>
      </td>
      <td><%= product.quantity || 0 %></td>
      <td>
        <div class="btn-group-action">
          <% if(product.productOffer) { %>
            <button class="btn btn-danger btn-sm action-btn" 
                    data-id="<%= product._id %>"
                    onclick="removeProductOffer('<%= product._id %>')">
              Remove Product Offer
            </button>
          <% } else { %>
            <button class="btn btn-success btn-sm action-btn" 
                    data-id="<%= product._id %>"
                    onclick="addProductOffer('<%= product._id %>')">
              Add Product Offer
            </button>
          <% } %>
        </div>
      </td>
      <td>
        <!-- Edit Button in its own column -->
        <a href="/admin/editProduct/<%= product._id %>" class="btn btn-info btn-sm action-btn">
          Edit
        </a>
      </td>
    </tr>
  <% }); %>
</tbody>
      </table>
    </div>
  </div>
</div>

<!-- Replace the existing pagination section -->
<div class="container mt-3">
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center mb-4">
            <!-- Previous button -->
            <% if (currentPage > 0) { %>
                <li class="page-item">
                    <a class="page-link" href="?page=<%= currentPage - 1 %><%= searchQuery ? '&search=' + searchQuery : '' %>" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
            <% } %>

            <!-- Page numbers -->
            <% for(let i = 0; i < totalPages; i++) { %>
                <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                    <a class="page-link" href="?page=<%= i %><%= searchQuery ? '&search=' + searchQuery : '' %>">
                        <%= i + 1 %>
                    </a>
                </li>
            <% } %>

            <!-- Next button -->
            <% if (currentPage < totalPages - 1) { %>
                <li class="page-item">
                    <a class="page-link" href="?page=<%= currentPage + 1 %><%= searchQuery ? '&search=' + searchQuery : '' %>" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            <% } %>
        </ul>
    </nav>

    <!-- Page info -->
    <div class="text-center mt-2 mb-4">
        <small class="text-muted">
            Showing <%= (currentPage * perPage) + 1 %> to <%= Math.min((currentPage + 1) * perPage, total) %> of <%= total %> products
        </small>
    </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Helper function to update the button state after a successful operation
    function updateButtonState(button, isBlocked) {
      if (isBlocked) {
        // Change the button to "Unblock" if product is now blocked
        button.innerText = "Unblock";
        button.classList.remove("btn-danger", "block-button");
        button.classList.add("btn-success", "unblock-button");
        // Remove previous listeners and add new one for unblocking
        button.replaceWith(button.cloneNode(true));
        button = document.querySelector(`[data-id="${button.dataset.id}"]`);
        button.addEventListener("click", () => {
          sendRequest("/admin/unblockProduct", button.dataset.id, button);
        });
      } else {
        // Change the button to "Block" if product is now unblocked
        button.innerText = "Block";
        button.classList.remove("btn-success", "unblock-button");
        button.classList.add("btn-danger", "block-button");
        // Remove previous listeners and add new one for blocking
        button.replaceWith(button.cloneNode(true));
        button = document.querySelector(`[data-id="${button.dataset.id}"]`);
        button.addEventListener("click", () => {
          sendRequest("/admin/blockProduct", button.dataset.id, button);
        });
      }
    }
    
    // Function to send a fetch request and update the UI on success
    function sendRequest(url, productId, button) {
      fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ id: productId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Set a message based on the new status
          let message = data.product.isBlocked
            ? "Product blocked successfully!"
            : "Product unblocked successfully!";
          // Show a SweetAlert popup with the success message
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: message,
            timer: 1500,
            showConfirmButton: false
          });
          updateButtonState(button, data.product.isBlocked);
        } else {
          // Show an error SweetAlert if the operation failed
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || "Operation failed"
          });
        }
      })
      .catch(error => {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message
        });
        console.error("Error:", error);
      });
    }
    
    // Attach click event listeners for the initial buttons
    document.querySelectorAll(".block-button").forEach(button => {
      button.addEventListener("click", () => {
        sendRequest("/admin/blockProduct", button.dataset.id, button);
      });
    });
    
    document.querySelectorAll(".unblock-button").forEach(button => {
      button.addEventListener("click", () => {
        sendRequest("/admin/unblockProduct", button.dataset.id, button);
      });
    });
  });
  </script>
  
<!-- Replace the existing offer management scripts with this unified version -->
<script>
// Replace the existing handleProductOffer function
async function handleProductOffer(action, productId) {
    try {
        // If adding offer, show input dialog
        let percentage;
        if (action === 'add') {
            const result = await Swal.fire({
                title: 'Enter Offer Percentage',
                input: 'number',
                inputLabel: 'Offer Percentage',
                inputPlaceholder: 'Enter percentage (1-99)',
                showCancelButton: true,
                inputValidator: (value) => {
                    if (!value || value < 1 || value > 99) {
                        return 'Please enter a valid percentage between 1 and 99';
                    }
                }
            });

            if (!result.isConfirmed) return;
            percentage = result.value;
        }

        // Confirm before removing
        if (action === 'remove') {
            const result = await Swal.fire({
                title: 'Remove Offer',
                text: 'Are you sure you want to remove this offer?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, remove it!'
            });

            if (!result.isConfirmed) return;
        }

        // Make API call
        const url = `/admin/${action}ProductOffer`;
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                productId,
                ...(percentage && { percentage })
            })
        });

        const data = await response.json();
        
        if (data.success) {
            // Update UI elements including price
            updateProductDisplay(productId, data);
            await Swal.fire({
                icon: 'success',
                title: `Offer ${action === 'add' ? 'Added' : 'Removed'} Successfully`,
                text: data.message,
                timer: 1500,
                showConfirmButton: false
            });
        } else {
            throw new Error(data.message || `Failed to ${action} offer`);
        }
    } catch (error) {
        console.error(`Error ${action}ing offer:`, error);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || `An error occurred while ${action}ing the offer`
        });
    }
}

// Add this function to update the offer display
function updateOfferDisplay(productId, data) {
    const offerValueElement = document.getElementById(`offer-value-${productId}`);
    const buttonContainer = document.querySelector(`button[data-id="${productId}"]`).parentElement;
    
    let offerHtml = '';
    let buttonHtml = '';
    
    if (data.categoryOffer && data.productOffer) {
        offerHtml = `
            <span class="badge bg-info">Category: ${data.categoryOffer}%</span>
            <span class="badge bg-success">Product: ${data.productOffer}%</span>
            <span class="badge bg-warning">Applied: ${Math.max(data.categoryOffer, data.productOffer)}%</span>
        `;
    } else if (data.categoryOffer) {
        offerHtml = `<span class="badge bg-info">Category: ${data.categoryOffer}%</span>`;
    } else if (data.productOffer) {
        offerHtml = `<span class="badge bg-success">Product: ${data.productOffer}%</span>`;
    } else {
        offerHtml = '0%';
    }
    
    // Always show product offer controls
    buttonHtml = data.productOffer ? 
        `<button class="btn btn-danger btn-sm action-btn" data-id="${productId}" onclick="removeProductOffer('${productId}')">
            Remove Product Offer
         </button>` :
        `<button class="btn btn-success btn-sm action-btn" data-id="${productId}" onclick="addProductOffer('${productId}')">
            Add Product Offer
         </button>`;
    
    offerValueElement.innerHTML = offerHtml;
    buttonContainer.innerHTML = buttonHtml;
}

// Add this new function to update all relevant display elements
function updateProductDisplay(productId, data) {
    // Update offer display
    const offerValueElement = document.getElementById(`offer-value-${productId}`);
    const buttonContainer = document.querySelector(`button[data-id="${productId}"]`).parentElement;
    const salePriceElement = document.querySelector(`tr[data-product-id="${productId}"] td[data-price-type="sale"]`);
    
    // Update offer badges
    let offerHtml = '';
    if (data.categoryOffer && data.productOffer) {
        offerHtml = `
            <span class="badge bg-info">Category: ${data.categoryOffer}%</span>
            <span class="badge bg-success">Product: ${data.productOffer}%</span>
            <span class="badge bg-warning">Applied: ${Math.max(data.categoryOffer, data.productOffer)}%</span>
        `;
    } else if (data.categoryOffer) {
        offerHtml = `<span class="badge bg-info">Category: ${data.categoryOffer}%</span>`;
    } else if (data.productOffer) {
        offerHtml = `<span class="badge bg-success">Product: ${data.productOffer}%</span>`;
    } else {
        offerHtml = '0%';
    }
    
    // Update offer control button
    const buttonHtml = data.productOffer ? 
        `<button class="btn btn-danger btn-sm action-btn" data-id="${productId}" onclick="removeProductOffer('${productId}')">
            Remove Product Offer
         </button>` :
        `<button class="btn btn-success btn-sm action-btn" data-id="${productId}" onclick="addProductOffer('${productId}')">
            Add Product Offer
         </button>`;
    
    // Update the UI elements
    offerValueElement.innerHTML = offerHtml;
    buttonContainer.innerHTML = buttonHtml;
    
    // Update the sale price if provided in the response
    if (data.newPrice !== undefined && salePriceElement) {
        salePriceElement.textContent = `₹${data.newPrice.toFixed(2)}`;
    }
}

// Category offer alert function
function showCategoryOfferAlert(categoryOfferValue) {
    Swal.fire({
        icon: 'info',
        title: 'Category Offer Active',
        html: `
            <div class="text-center">
                <p>This product has a category offer of <b>${categoryOfferValue}%</b>.</p>
                <p>The higher discount between category and product offers will be applied.</p>
            </div>
        `,
        confirmButtonText: 'Understood',
        confirmButtonColor: '#3085d6'
    });
}

// Simple wrapper functions for backwards compatibility
function addProductOffer(productId) {
    handleProductOffer('add', productId);
}

function removeProductOffer(productId) {
    handleProductOffer('remove', productId);
}
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<%- include("../../views/partials/admin/footer") %>
