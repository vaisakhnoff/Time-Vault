<%- include("../../views/partials/admin/header") %>
<head>
  <style>
    .thumbnails-container {
      display: flex;
      overflow-x: auto;
    }
    .thumbnail {
      margin-right: 10px;
    }
    .input-upload {
      position: relative;
    }
    .error-message {
      color: red;
      display: none;
    }
    .hidden {
      display: none;
    }

    .crop-container {
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .cropper-container {
        margin: 0 auto;
    }

    .cropper-view-box,
    .cropper-face {
        border-radius: 8px;
    }

    .cropper-controls {
        margin-top: 15px;
        padding: 10px 0;
        border-top: 1px solid #eee;
    }

    .image-preview {
        max-width: 200px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
  </style>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
 
</head>
<section class="content-main">
  <div class="row">
    <div class="col-9">
      <div class="content-header">
        <h2 class="content-title">Edit Product</h2>
      </div>
    </div>
    <div class="col-lg-12">
      <div class="card mb-4">
        <div class="card-body">
          <!-- Form uses multipart/form-data and no action since submission uses Fetch -->
          <form id="editProductForm" method="post" enctype="multipart/form-data">
            <!-- Product Name -->
            <div class="mb-4">
              <label for="product_name" class="form-label">Product Name</label>
              <input type="text" name="productName" value="<%= product.productName %>" class="form-control border" id="product_name">
              <div id="productName-error" class="error-message"></div>
            </div>

            <!-- Replace the existing brand field with this dropdown -->
            <div class="mb-4">
                <label class="form-label">Brand</label>
                <select class="form-select border" name="brand">
                    <% brands.forEach(function(brandItem){ %>
                        <option value="<%= brandItem.brandName %>" 
                            <%= product.brand && product.brand._id.toString() === brandItem._id.toString() ? "selected" : "" %>>
                            <%= brandItem.brandName %>
                        </option>
                    <% }); %>
                </select>
                <div id="brand-error" class="error-message"></div>
            </div>

            <!-- Description Field -->
            <div class="mb-4">
              <label class="form-label">Full Description</label>
              <textarea name="descriptionData" class="form-control border"><%= product.description %></textarea>
              <div id="description-error" class="error-message"></div>
            </div>

            <!-- Price & Quantity Fields -->
            <div class="row">
              <div class="col-lg-4 mb-4">
                <label class="form-label">Regular Price</label>
                <input placeholder="$" name="regularPrice" type="text" value="<%= product.regularPrice %>" class="form-control border">
                <div id="regularPrice-error" class="error-message"></div>
              </div>
              <div class="col-lg-4 mb-4">
                <label class="form-label">Sale Price</label>
                <input name="salePrice" type="text" value="<%= product.salePrice %>" class="form-control border">
                <div id="salePrice-error" class="error-message"></div>
              </div>
              <div class="col-lg-4 mb-4">
                <label class="form-label">Quantity</label>
                <input name="quantity" type="text" value="<%= product.quantity %>" class="form-control border">
                <div id="quantity-error" class="error-message"></div>
              </div>
            </div>

            <!-- Category -->
            <div class="card mb-4">
              <div class="card-body">
                <div class="row gx-2">
                  <div class="col-sm-6 mb-3">
                    <label class="form-label">Category</label>
                    <select class="form-select border" name="category">
                      <% categories.forEach(function(cat){ %>
                        <option value="<%= cat.name %>" <%= product.category && product.category.name === cat.name ? "selected" : "" %>><%= cat.name %></option>
                      <% }); %>
                    </select>
                    <div id="category-error" class="error-message"></div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Images Section (up to 4 images) -->
            <div class="card mb-2">
              <div class="card-header">
                <h4>Product Images (up to 4)</h4>
              </div>
              <div class="card-body">
                <% for(let i = 1; i <= 4; i++) { %>
                  <div class="image-upload-section" id="imageSection<%= i %>">
                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                      <div class="current-image-container" id="currentImage<%= i %>">
                        <% if(product.productImage[i-1]) { %>
                          <img 
                            src="/uploads/product-images/<%= product.productImage[i-1] %>" 
                            alt="Current Image <%= i %>" 
                            class="current-preview"
                            style="max-width:200px;"
                          >
                          <button type="button" 
                                  class="btn btn-sm btn-danger mt-2" 
                                  onclick="removeImage('<%= i %>')">
                            Remove
                          </button>
                        <% } %>
                      </div>
                      
                      <div class="new-image-container mt-3">
                        <input class="form-control" 
                               type="file" 
                               name="images" 
                               id="input<%= i %>" 
                               accept="image/png, image/jpeg, image/jpg"
                               onchange="handleImageChange(event, <%= i %>)">
                      </div>
                      
                      <div id="images-error-<%= i %>" class="error-message"></div>
                    </div>
                    
                    <!-- Update the image cropper container in the image section -->
                    <div class="image-cropper d-none" id="cropContainer<%= i %>">
                        <div class="crop-container" style="max-width: 500px; margin: 0 auto;">
                            <img src="" id="croppedImg<%= i %>" alt="Cropped Preview" style="max-width: 100%;">
                            <div class="cropper-controls mt-3 d-flex justify-content-center gap-2">
                                <button type="button" id="saveCrop<%= i %>" class="btn btn-primary">
                                    <i class="material-icons md-save"></i> Save Crop
                                </button>
                                <button type="button" id="cancelCrop<%= i %>" class="btn btn-secondary">
                                    <i class="material-icons md-close"></i> Cancel
                                </button>
                            </div>
                        </div>
                    </div>
                  </div>
                <% } %>
              </div>
            </div>

            <!-- Update Button -->
            <div>
              <button class="btn btn-md rounded font-sm hover-up" id="updatebtn" type="button" onclick="updateProductFetch()">Update</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script> -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<%- include("../../views/partials/admin/footer") %>

<script>
// --------------------- Validation Functions ---------------------
function validateForm() {
  clearErrorMessages();
  let isValid = true;
  const name = document.getElementsByName('productName')[0].value;
  const description = document.getElementsByName('descriptionData')[0].value;
  const quantity = document.getElementsByName('quantity')[0].value;
  const price = document.getElementsByName('regularPrice')[0].value;
  const saleprice = document.getElementsByName('salePrice')[0].value;
  
  if (name.trim() === "") {
    displayErrorMessage('productName-error', 'Please enter a product name.');
    isValid = false;
  }
  if (description.trim() === "") {
    displayErrorMessage('description-error', 'Please enter a product description.');
    isValid = false;
  }
  if (parseInt(quantity) < 0) {
    displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
    isValid = false;
  }
  if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
    displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
    isValid = false;
  }
  if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
    displayErrorMessage('salePrice-error', 'Please enter a valid non-negative sale price.');
    isValid = false;
  }
  
  const brand = document.getElementsByName('brand')[0].value;
  if (brand.trim() === "") {
    displayErrorMessage('brand-error', 'Please select a brand.');
    isValid = false;
  }
  
  return isValid;
}

function displayErrorMessage(elementId, message) {
  const errorElement = document.getElementById(elementId);
  if (errorElement) {
    errorElement.innerText = message;
    errorElement.style.display = "block";
  }
}

function clearErrorMessages() {
  const errorElements = document.getElementsByClassName('error-message');
  Array.from(errorElements).forEach(element => {
    element.innerText = '';
    element.style.display = "none";
  });
}

// --------------------- Image Cropping Functions ---------------------
function handleImageChange(event, index) {
    const input = event.target;
    const currentImageContainer = document.getElementById(`currentImage${index}`);
    const cropContainer = document.getElementById(`cropContainer${index}`);
    let cropper = null;
    
    if (input.files && input.files[0]) {
        // Validate file size (max 5MB)
        if (input.files[0].size > 5 * 1024 * 1024) {
            Swal.fire({
                icon: 'error',
                title: 'File too large',
                text: 'Please select an image under 5MB'
            });
            input.value = '';
            return;
        }

        // Hide current image
        if (currentImageContainer) {
            currentImageContainer.style.display = 'none';
        }
        
        // Show cropper
        cropContainer.classList.remove('d-none');
        
        const tempImg = document.getElementById(`croppedImg${index}`);
        const saveButton = document.getElementById(`saveCrop${index}`);
        const cancelButton = document.getElementById(`cancelCrop${index}`);
        
        const reader = new FileReader();
        reader.onload = function(e) {
            // Destroy existing cropper if any
            if (tempImg.cropper) {
                tempImg.cropper.destroy();
            }
            
            tempImg.src = e.target.result;
            
            // Initialize cropper
            cropper = new Cropper(tempImg, {
                aspectRatio: 1,
                viewMode: 2,
                autoCropArea: 1,
                responsive: true,
                guides: true,
                cropBoxMovable: true,
                cropBoxResizable: true,
                toggleDragModeOnDblclick: true
            });

            // Save cropped image
            saveButton.onclick = function() {
                const canvas = cropper.getCroppedCanvas({
                    width: 450,
                    height: 450,
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high'
                });

                canvas.toBlob(function(blob) {
                    const fileName = `cropped-${index}-${Date.now()}.png`;
                    const croppedFile = new File([blob], fileName, { type: 'image/png' });

                    // Update file input
                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(croppedFile);
                    input.files = dataTransfer.files;

                    // Show preview
                    if (currentImageContainer) {
                        const previewImg = currentImageContainer.querySelector('img') || document.createElement('img');
                        previewImg.src = canvas.toDataURL('image/png');
                        previewImg.classList.add('image-preview');
                        currentImageContainer.innerHTML = '';
                        currentImageContainer.appendChild(previewImg);
                        currentImageContainer.style.display = 'block';
                    }

                    // Cleanup
                    cropper.destroy();
                    cropContainer.classList.add('d-none');

                    // Show success message
                    Swal.fire({
                        icon: 'success',
                        title: 'Image Cropped',
                        text: 'Image has been cropped and saved',
                        timer: 1500,
                        showConfirmButton: false
                    });
                }, 'image/png', 0.9);
            };

            // Cancel cropping
            cancelButton.onclick = function() {
                cropper.destroy();
                cropContainer.classList.add('d-none');
                input.value = '';
                if (currentImageContainer) {
                    currentImageContainer.style.display = 'block';
                }
            };
        };
        
        reader.readAsDataURL(input.files[0]);
    }
}

function removeImage(index) {
    // Hide current image container
    const currentImageContainer = document.getElementById(`currentImage${index}`);
    currentImageContainer.style.display = 'none';
    
    // Clear the file input
    const fileInput = document.getElementById(`input${index}`);
    fileInput.value = '';
    
    // Add a hidden input to track removed images
    const form = document.getElementById('editProductForm');
    const hiddenInput = document.createElement('input');
    hiddenInput.type = 'hidden';
    hiddenInput.name = 'removedImages';
    hiddenInput.value = index - 1; // Array index
    form.appendChild(hiddenInput);
}

// --------------------- Fetch Submission for Edit ---------------------
function updateProductFetch() {
  if (!validateForm()) return;
  const form = document.getElementById("editProductForm");
  const formData = new FormData(form);
  const productId = "<%= product._id %>";
  
  fetch(`/admin/editProduct/${productId}`, {
    method: "POST",
    body: formData
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Success',
        text: 'Product updated successfully!',
        timer: 1500,
        showConfirmButton: false
      });
      // Redirect to Products page after success
      setTimeout(() => { location.href = '/admin/products'; }, 1500);
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: data.message || 'Failed to update product'
      });
    }
  })
  .catch(err => {
    console.error(err);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: err.message
    });
  });
}
</script>
