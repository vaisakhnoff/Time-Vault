<%- include("../../views/partials/admin/header") %>

<head>
    <title>Add New Product | Admin Dashboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <style>
        :root {
            --primary-color: #3a86ff;
            --secondary-color: #8338ec;
            --success-color: #06d6a0;
            --danger-color: #ef476f;
            --warning-color: #ffd166;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --border-radius: 8px;
        }

        .product-form-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 30px;
        }

        .form-card {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            margin-bottom: 30px;
            overflow: hidden;
            border: 1px solid rgba(0, 0, 0, 0.08);
        }

        .form-card-header {
            background-color: var(--light-color);
            padding: 15px 20px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.08);
        }

        .form-card-body {
            padding: 25px;
        }

        .form-title {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 0;
            color: var(--dark-color);
        }

        .section-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 20px;
        }

        .form-control {
            border: 1px solid #ced4da;
            border-radius: var(--border-radius);
            padding: 10px 15px;
            font-size: 14px;
            transition: all 0.2s;
        }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(58, 134, 255, 0.25);
        }

        .form-label {
            font-weight: 500;
            margin-bottom: 8px;
            display: block;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .error-message {
            color: var(--danger-color);
            font-size: 12px;
            margin-top: 5px;
            display: none;
        }

        .image-upload-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 15px;
        }

        .image-upload-section {
            background: var(--light-color);
            border-radius: var(--border-radius);
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            position: relative;
            transition: all 0.3s ease;
            overflow: hidden; /* Prevent content overflow */
        }

        .image-upload-section:hover {
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .image-preview {
            width: 100%;
            height: 200px;
            margin: 0 auto 15px;
            border-radius: var(--border-radius);
            object-fit: contain;
            background-color: white;
            border: 1px dashed #ced4da;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .image-preview-placeholder {
            color: #6c757d;
            font-size: 50px;
            opacity: 0.5;
        }

        .cropper-container {
            max-width: 100%;
            margin: 20px auto;
        }

        .cropper-controls {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 15px;
            position: relative;
            z-index: 10; /* Ensure buttons are above other elements */
        }

        .btn {
            padding: 8px 16px;
            border-radius: var(--border-radius);
            border: none;
            cursor: pointer;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
            transition: all 0.2s;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: #2a75e6;
            transform: translateY(-2px);
        }

        .btn-secondary {
            background-color: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background-color: #5a6268;
            transform: translateY(-2px);
        }

        .btn-success {
            background-color: var(--success-color);
            color: white;
        }

        .btn-success:hover {
            background-color: #05b589;
            transform: translateY(-2px);
        }

        .input-group {
            display: flex;
            align-items: center;
        }

        .input-group-text {
            background-color: var(--light-color);
            border: 1px solid #ced4da;
            border-radius: var(--border-radius) 0 0 var(--border-radius);
            padding: 10px 15px;
            font-size: 14px;
            border-right: none;
        }

        .input-group .form-control {
            border-radius: 0 var(--border-radius) var(--border-radius) 0;
        }

        .product-info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
        }

        .d-none {
            display: none !important;
        }

        [class*="col-"] {
            padding: 0 15px;
        }

        .row {
            display: flex;
            flex-wrap: wrap;
            margin: 0 -15px;
        }

        .swal2-container {
            z-index: 9999 !important; /* Ensure modals are on top */
        }

        @media (max-width: 768px) {
            .product-info-grid {
                grid-template-columns: 1fr;
            }
            
            .image-upload-container {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>

<main class="product-form-container">
    <div class="form-card">
        <div class="form-card-header">
            <h2 class="form-title">Add New Product</h2>
        </div>
        <div class="form-card-body">
            <form method="post" action="/admin/addProducts" enctype="multipart/form-data" id="productForm" onsubmit="event.preventDefault();">
                <!-- Product Details Section -->
                <div class="form-card">
                    <div class="form-card-header">
                        <h3 class="section-title">Product Information</h3>
                    </div>
                    <div class="form-card-body">
                        <div class="form-group">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Enter product name" name="productName" class="form-control" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">Brand</label>
                                    <select class="form-control" name="brand" required>
                                        <option value="">Select Brand</option>
                                        <% brands.forEach(function(brand) { %>
                                            <option value="<%= brand.brandName %>"><%= brand.brandName %></option>
                                        <% }); %>
                                    </select>
                                    <div id="brand-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">Category</label>
                                    <select class="form-control" name="category">
                                        <% for(let i = 0; i < cat.length; i++){ %>
                                            <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                                        <% } %>
                                    </select>
                                    <div id="category-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Product Description</label>
                            <textarea placeholder="Enter detailed product description" id="descriptionid" name="description" class="form-control" rows="4"></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                    </div>
                </div>

                <!-- Pricing & Inventory Section -->
                <div class="form-card">
                    <div class="form-card-header">
                        <h3 class="section-title">Pricing & Inventory</h3>
                    </div>
                    <div class="form-card-body">
                        <div class="product-info-grid">
                            <div class="form-group">
                                <label class="form-label">Regular Price</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input placeholder="0.00" name="regularPrice" type="text" class="form-control">
                                </div>
                                <div id="regularPrice-error" class="error-message"></div>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Sale Price</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input placeholder="0.00" name="salePrice" type="text" class="form-control">
                                </div>
                                <div id="salePrice-error" class="error-message"></div>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Quantity in Stock</label>
                                <input placeholder="0" name="quantity" type="text" class="form-control">
                                <div id="quantity-error" class="error-message"></ شبیه
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Images Section -->
                <div class="form-card">
                    <div class="form-card-header">
                        <h3 class="section-title">Product Images (Max 4)</h3>
                    </div>
                    <div class="form-card-body">
                        <div class="image-upload-container">
                            <% for(let i = 1; i <= 4; i++) { %>
                                <div class="image-upload-section" id="imageSection<%= i %>">
                                    <div class="preview-container">
                                        <div class="image-preview" id="previewContainer<%= i %>">
                                            <img src="" alt="" id="imgView<%= i %>" class="d-none">
                                            <div class="image-preview-placeholder" id="placeholder<%= i %>">
                                                <i class="material-icons">add_photo_alternate</i>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="input-container mt-3">
                                        <input class="form-control" 
                                            type="file" 
                                            name="images" 
                                            id="input<%= i %>" 
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="handleImageUpload(event, <%= i %>)">
                                    </div>
                                    <div class="cropper-container d-none" id="cropperContainer<%= i %>">
                                        <div class="crop-area">
                                            <img src="" id="cropperImage<%= i %>" alt="Image to crop">
                                        </div>
                                        <div class="cropper-controls">
                                            <button type="button" class="btn btn-primary" onclick="saveCrop(<%= i %>)">
                                                <i class="material-icons">save</i> 
                                            </button>
                                            <button type="button" class="btn btn-secondary" onclick="cancelCrop(<%= i %>)">
                                                <i class="material-icons">close</i> 
                                            </button>
                                        </div>
                                    </div>
                                    <div id="error<%= i %>" class="error-message"></div>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>

                <div class="form-group text-end">
                    <button id="publishButton" class="btn btn-success" type="button" onclick="validateAndSubmit()">
                        <i class="material-icons">publish Product</i> 
                    </button>
                </div>
            </form>
        </div>
    </div>
</main>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>
// Global variables
const croppers = {};
const maxFileSize = 5 * 1024 * 1024; // 5MB

// Handle image upload and initialize cropper
function handleImageUpload(event, index) {
    const file = event.target.files[0];
    const input = event.target;
    
    // Validate file size
    if (file && file.size > maxFileSize) {
        if (Swal.isVisible()) {
            Swal.close();
        }
        Swal.fire({
            icon: 'error',
            title: 'File Too Large',
            text: 'Please select an image under 5MB',
            confirmButtonColor: '#3a86ff'
        });
        input.value = '';
        return;
    }

    if (file) {
        // Show loading state
        if (Swal.isVisible()) {
            Swal.close();
        }
        Swal.fire({
            title: 'Processing Image',
            text: 'Please wait...',
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => {
                Swal.showLoading();
            }
        });

        const reader = new FileReader();
        reader.onload = function(e) {
            // Destroy existing cropper if any
            if (croppers[index]) {
                croppers[index].destroy();
                delete croppers[index];
            }

            const cropperImage = document.getElementById(`cropperImage${index}`);
            const cropperContainer = document.getElementById(`cropperContainer${index}`);
            
            // Hide preview and show cropper
            document.getElementById(`imgView${index}`).classList.add('d-none');
            document.getElementById(`placeholder${index}`).classList.add('d-none');
            cropperContainer.classList.remove('d-none');
            
            cropperImage.src = e.target.result;
            
            // Initialize cropper
            croppers[index] = new Cropper(cropperImage, {
                aspectRatio: 1,
                viewMode: 2,
                dragMode: 'move',
                autoCropArea: 1,
                restore: false,
                guides: true,
                center: true,
                highlight: false,
                cropBoxMovable: true,
                cropBoxResizable: true,
                toggleDragModeOnDblclick: false,
                zoomable: true
            });

            Swal.close();
        };
        reader.readAsDataURL(file);
    }
}

// Save cropped image
function saveCrop(index) {
    const cropper = croppers[index];
    if (!cropper) return;

    const saveBtn = document.querySelector(`#cropperContainer${index} .btn-primary`);
    const cancelBtn = document.querySelector(`#cropperContainer${index} .btn-secondary`);
    if (saveBtn.disabled) return;

    saveBtn.disabled = true;
    cancelBtn.disabled = true;

    const canvas = cropper.getCroppedCanvas({
        width: 450,
        height: 450,
        imageSmoothingEnabled: true,
        imageSmoothingQuality: 'high'
    });

    canvas.toBlob(async (blob) => {
        try {
            const fileName = `cropped-${Date.now()}-${index}.png`;
            const croppedFile = new File([blob], fileName, { type: 'image/png' });

            if (croppedFile.size > maxFileSize) {
                throw new Error('Cropped image is too large');
            }

            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(croppedFile);
            document.getElementById(`input${index}`).files = dataTransfer.files;

            const preview = document.getElementById(`imgView${index}`);
            preview.src = canvas.toDataURL('image/png');
            preview.classList.remove('d-none');
            document.getElementById(`placeholder${index}`).classList.add('d-none');
            document.getElementById(`cropperContainer${index}`).classList.add('d-none');

            cropper.destroy();
            delete croppers[index];

            if (Swal.isVisible()) {
                await Swal.close();
            }

            await Swal.fire({
                icon: 'success',
                title: 'Image Cropped',
                text: 'Image has been cropped and optimized',
                timer: 1500,
                showConfirmButton: false,
                allowOutsideClick: false
            });
        } catch (error) {
            console.error('Cropping error:', error);
            if (Swal.isVisible()) {
                await Swal.close();
            }
            Swal.fire({
                icon: 'error',
                title: 'Processing Error',
                text: error.message || 'Failed to process image'
            });
        } finally {
            saveBtn.disabled = false;
            cancelBtn.disabled = false;
        }
    }, 'image/png', 0.9);
}

// Cancel crop operation
function cancelCrop(index) {
    const cancelBtn = document.querySelector(`#cropperContainer${index} .btn-secondary`);
    if (cancelBtn.disabled) return;
    cancelBtn.disabled = true;

    const cropper = croppers[index];
    if (cropper) {
        cropper.destroy();
        delete croppers[index];
    }

    document.getElementById(`input${index}`).value = '';
    document.getElementById(`cropperContainer${index}`).classList.add('d-none');
    document.getElementById(`imgView${index}`).classList.add('d-none');
    document.getElementById(`placeholder${index}`).classList.remove('d-none');

    if (Swal.isVisible()) {
        Swal.close();
    }

    Swal.fire({
        icon: 'info',
        title: 'Cancelled',
        text: 'Image cropping cancelled',
        timer: 1500,
        showConfirmButton: false,
        allowOutsideClick: false
    }).then(() => {
        cancelBtn.disabled = false;
    });
}

// Validate form and trigger submit
function validateAndSubmit() {
    const publishButton = document.getElementById('publishButton');
    if (publishButton.disabled) return;
    publishButton.disabled = true;

    const activeCroppers = Object.keys(croppers).length;
    if (activeCroppers > 0) {
        Swal.fire({
            icon: 'warning',
            title: 'Finish Cropping',
            text: 'Please save or cancel all image crops before publishing',
            confirmButtonColor: '#3a86ff'
        });
        publishButton.disabled = false;
        return;
    }

    if (validateForm() && validateImages()) {
        const form = document.getElementById('productForm');
        const formData = new FormData(form);

        fetch('/admin/addProducts', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: data.message,
                    confirmButtonColor: '#06d6a0'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/admin/products';
                    }
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: data.title || 'Error',
                    text: data.message || 'Something went wrong!',
                    confirmButtonColor: '#ef476f'
                });
                publishButton.disabled = false;
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Something went wrong!',
                confirmButtonColor: '#ef476f'
            });
            publishButton.disabled = false;
        });
    } else {
        publishButton.disabled = false;
    }
}

// Validate form fields
function validateForm() {
    clearErrorMessages();
    let isValid = true;

    const name = document.getElementById('product_name').value.trim();
    const description = document.getElementById('descriptionid').value.trim();
    const brand = document.getElementsByName('brand')[0].value.trim();
    const price = document.getElementsByName('regularPrice')[0].value.trim();
    const salePrice = document.getElementsByName('salePrice')[0].value.trim();
    const quantity = document.getElementsByName('quantity')[0].value.trim();

    // Product Name validation
    if (name === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    }

    // Description validation
    if (description === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }

    // Quantity validation
    if (quantity === "" || isNaN(quantity) || parseInt(quantity) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
        isValid = false;
    }

    // Regular Price validation
    if (price === "" || !/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }

    // Sale Price validation
    if (salePrice !== "" && (!/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) < 0)) {
        displayErrorMessage('salePrice-error', 'Please enter a valid non-negative sale price.');
        isValid = false;
    }

    // Price vs. Sale Price comparison
    if (salePrice !== "" && parseFloat(price) <= parseFloat(salePrice)) {
        displayErrorMessage('salePrice-error', 'Sale price must be less than regular price.');
        isValid = false;
    }

    // Brand validation
    if (brand === "") {
        displayErrorMessage('brand-error', 'Please select a brand.');
        isValid = false;
    }

    return isValid;
}

// Validate uploaded images
function validateImages() {
    // Add your image validation logic here if needed
    return true;
}

// Display error message
function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }
}

// Clear all error messages
function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
        element.style.display = "none";
    });
}
</script>

<%- include("../../views/partials/admin/footer") %>