<%- include('../partials/admin/header') %>
    <style>
        .loading-state {
            position: relative;
        }

        .loading-state::after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1;
        }

        .loading-state::before {
            content: "";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 30px;
            height: 30px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #4361ee;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            z-index: 2;
        }

        @keyframes spin {
            0% {
                transform: translate(-50%, -50%) rotate(0deg);
            }

            100% {
                transform: translate(-50%, -50%) rotate(360deg);
            }
        }
    </style>

    <div class="container py-4">
        <!-- Global Time Period Filter -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        <div>
                            <h2>Dashboard </h2>
                            <p>Whole data about your business here</p>
                        </div>
                        <div class="d-flex align-items-center">
                            <select id="globalFilter" class="form-select me-2" onchange="updateAllCharts()">
                                <option value="daily">Daily</option>
                                <option value="weekly" selected>Weekly</option>
                                <option value="monthly">Monthly</option>
                                <option value="yearly">Yearly</option>
                                <option value="custom">Custom</option>
                            </select>
                            <div id="customDates" style="display: none;" class="d-flex">
                                <input type="date" id="fromDate" class="form-control me-2" />
                                <input type="date" id="toDate" class="form-control me-2" />
                                <button type="button" class="btn btn-primary" onclick="updateAllCharts()">Apply</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="row mb-4">
            <div class="col-lg-3">
                <div class="card card-body mb-4">
                    <article class="icontext">
                        <span class="icon icon-sm rounded-circle bg-primary-light"><i
                                class="text-primary material-icons md-monetization_on"></i></span>
                        <div class="text">
                            <h6 class="mb-1 card-title">Revenue (Delivered Orders)</h6>
                            <span id="revenueValue">â‚¹ <%= stats.total.sales.toFixed(2) %></span>
                            <span class="text-sm">
                                From delivered orders only
                            </span>
                        </div>
                    </article>
                </div>
            </div>
            <div class="col-lg-3">
                <div class="card card-body mb-4">
                    <article class="icontext">
                        <span class="icon icon-sm rounded-circle bg-success-light"><i
                                class="text-success material-icons md-local_shipping"></i></span>
                        <div class="text">
                            <h6 class="mb-1 card-title">Delivered Orders</h6>
                            <span id="ordersValue"><%= stats.total.orders %> orders</span>
                            <span class="text-sm">
                                Successfully delivered
                            </span>
                        </div>
                    </article>
                </div>
            </div>
            <div class="col-lg-3">
                <div class="card card-body mb-4">
                    <article class="icontext">
                        <span class="icon icon-sm rounded-circle bg-info-light"><i
                                class="text-info material-icons md-shopping_basket"></i></span>
                        <div class="text">
                            <h6 class="mb-1 card-title">Users</h6>
                            <span id="usersValue">0 users</span>
                            <span class="text-sm">
                                Active accounts
                            </span>
                        </div>
                    </article>
                </div>
            </div>
            <div class="col-lg-3">
                <div class="card card-body mb-4">
                    <article class="icontext">
                        <span class="icon icon-sm rounded-circle bg-warning-light">
                            <i class="text-warning material-icons md-qr_code"></i>
                        </span>
                        <div class="text">
                            <h6 class="mb-1 card-title">Products</h6>
                            <span id="productsValue">0 products</span>
                            <span id="categoriesCount" class="text-sm">In 0 Categories</span>
                        </div>
                    </article>
                </div>
            </div>
        </div>

        <!-- Sales revenue and orders overview -->
        <div class="row mb-4">
            <div class="col-md-6 mb-3">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <h5 class="card-title mb-3">Sales Revenue (Delivered Orders)</h5>
                        <div style="height: 300px">
                            <canvas id="salesChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6 mb-3">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <h5 class="card-title mb-3">Delivered Orders Overview</h5>
                        <div style="height: 300px">
                            <canvas id="ordersChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Category and Brand -->
        <div class="row mb-4">
            <div class="col-md-6 mb-3">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <h5 class="card-title mb-3">Category Performance (Delivered Orders)</h5>
                        <div style="height: 300px">
                            <canvas id="categoryChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6 mb-3">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <h5 class="card-title mb-3">Brand Performance (Delivered Orders)</h5>
                        <div style="height: 300px">
                            <canvas id="brandChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Best Selling Products -->
        <div class="row mb-4">
            <div class="col-md-8 mb-3">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title mb-3">Best Selling Products</h5>
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Category</th>
                                        <th>Sold</th>
                                    </tr>
                                </thead>
                                <tbody id="bestSellingTable">
                                    <tr>
                                        <td>productName</td>
                                        <td>category</td>
                                        <td>product.totalSales</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title mb-3">Top Performers</h5>
                        <div class="mb-4">
                            <p class="mb-1">Best Selling Brand</p>
                            <h5 id="bestBrand" class="mb-0">bestBrand</h5>
                            <small id="bestBrandSales" class="text-muted">sales</small>
                        </div>
                        <div>
                            <p class="mb-1">Best Selling Category</p>
                            <h5 id="bestCategory" class="mb-0">bestCategory</h5>
                            <small id="bestCategorySales" class="text-muted">bestCategorySales - sales</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
      

    <%- include("../partials/admin/footer") %>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        // Add this at the beginning of your script
        document.addEventListener('DOMContentLoaded', function() {
            // Set initial filter value
            document.getElementById('globalFilter').value = 'weekly';
            // Load initial data
            updateAllCharts();
        });

        let salesChart, ordersChart, categoryChart, brandChart;

        function updateAllCharts() {
            const filter = document.getElementById("globalFilter").value;
            const customDatesDiv = document.getElementById("customDates");
            if (filter === 'custom') {
                customDatesDiv.style.display = "flex";
            } else {
                customDatesDiv.style.display = "none";
            }

            // Add loading state to charts
            document.querySelectorAll(".card").forEach(card => {
                card.classList.add("loading-state");
            });
            
            // Compose query params. For custom dates, include the from and to values.
            let queryParams = `?filter=${filter}`;
            if(filter === 'custom') {
                const fromDate = document.getElementById("fromDate").value;
                const toDate = document.getElementById("toDate").value;
                if(fromDate && toDate) {
                    queryParams += `&from=${fromDate}&to=${toDate}`;
                }
            }

            // Update best selling data with the same filter
            loadBestSelling(filter);

            fetch(`/admin/dashboard-data${queryParams}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                },
                credentials: 'same-origin'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Dashboard data:', data);
                document.getElementById("revenueValue").innerText = `â‚¹ ${data.revenue.toLocaleString()}`;
                document.getElementById("ordersValue").innerText = `${data.totalOrders.toLocaleString()} orders`;
                document.getElementById("productsValue").innerText = `${data.totalProducts.toLocaleString()} products`;
                document.getElementById("usersValue").innerText = `${data.totalUsers.toLocaleString()} users`;
                document.getElementById("categoriesCount").innerText = `In ${data.totalCategories.toLocaleString()} Categories`;

                const categoryLabels = data.categoryPerformance.map(item => item.category);
                const categoryValues = data.categoryPerformance.map(item => item.totalSales);

                const brandLabels = data.brandPerformance.map(item => item.brand);
                const brandValues = data.brandPerformance.map(item => item.totalSales);

                const timeLabels = data.timeSeriesData.labels;
                const revenueData = data.timeSeriesData.revenueData;
                const orderData = data.timeSeriesData.orderData;

                updateSalesChart(timeLabels, revenueData, filter);
                updateOrdersChart(timeLabels, orderData, filter);
                updateCategoryChart(categoryLabels, categoryValues);
                updateBrandChart(brandLabels, brandValues);

                // Remove loading state
                document.querySelectorAll(".card").forEach(card => {
                    card.classList.remove("loading-state");
                });
            })
            .catch(error => {
                console.error("Error fetching dashboard data:", error);
                document.querySelectorAll(".card").forEach(card => {
                    card.classList.remove("loading-state");
                });
            });
        }

        function loadBestSelling(filter = "weekly") {
            document.querySelector(".table").closest(".card").classList.add("loading-state");

            fetch(`/admin/best-selling?filter=${filter}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                },
                credentials: 'same-origin'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Best selling data:', data); // Debug logging
                const productTable = document.getElementById("bestSellingTable");

                if (data.bestSellingProducts.length === 0) {
                    productTable.innerHTML = '<tr><td colspan="3" class="text-center">No data available</td></tr>';
                } else {
                    productTable.innerHTML = data.bestSellingProducts.map(product => `
                        <tr>
                            <td>${product.productName}</td>
                            <td>${product.category}</td>
                            <td>${product.totalSales}</td>
                        </tr>
                    `).join("");
                }

                // Update top performers
                document.getElementById("bestBrand").innerText = data.bestSellingBrands[0]?.brand || "N/A";
                document.getElementById("bestBrandSales").innerText = data.bestSellingBrands[0] ?
                `â‚¹${data.bestSellingBrands[0].revenue.toLocaleString()} (${data.bestSellingBrands[0].totalSales} units)` : 
                "No sales";

                document.getElementById("bestCategory").innerText = data.bestSellingCategories[0]?.category || "N/A";
                document.getElementById("bestCategorySales").innerText = data.bestSellingCategories[0] ?
                `${data.bestSellingCategories[0].totalSales} sales` : "0 sales";

                // Remove loading state
                document.querySelector(".table").closest(".card").classList.remove("loading-state");
            })
            .catch(error => {
                console.error("Error fetching best-selling data:", error);
                document.querySelector(".table").closest(".card").classList.remove("loading-state");
            });
        }

        function formatLabels(labels, filter) {
            if (filter === "monthly" || filter === "yearly") {
                return labels.map(label => {
                    // label is formatted as "YYYY-MM"
                    const [year, month] = label.split("-");
                    const date = new Date(year, parseInt(month) - 1);
                    return date.toLocaleDateString(undefined, { month: 'short', year: 'numeric' });
                });
            } else if (filter === "daily") {
                return labels.map(label => {
                    const date = new Date(label);
                    return date.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit' });
                });
            } else {
                // For weekly or other filters, show month and day
                return labels.map(label => {
                    const date = new Date(label);
                    return date.toLocaleDateString(undefined, { month: 'short', day: 'numeric' });
                });
            }
        }

        function updateSalesChart(labels, data, filter) {
            if (salesChart) salesChart.destroy();

            const formattedLabels = formatLabels(labels, filter);
            const ctx = document.getElementById("salesChart").getContext("2d");

            salesChart = new Chart(ctx, {
                type: "line",
                data: {
                    labels: formattedLabels,
                    datasets: [{
                        label: "Revenue (â‚¹)",
                        data: data,
                        backgroundColor: "rgba(54, 162, 235, 0.2)",
                        borderColor: "rgba(54, 162, 235, 1)",
                        borderWidth: 2,
                        tension: 0.3,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function (value) {
                                    return 'â‚¹' + value.toLocaleString();
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return `Revenue: â‚¹${context.raw.toLocaleString()}`;
                                }
                            }
                        }
                    }
                }
            });
        }

        function updateOrdersChart(labels, data, filter) {
            if (ordersChart) ordersChart.destroy();

            const formattedLabels = formatLabels(labels, filter);
            const ctx = document.getElementById("ordersChart").getContext("2d");

            ordersChart = new Chart(ctx, {
                type: "bar",
                data: {
                    labels: formattedLabels,
                    datasets: [{
                        label: "Orders",
                        data: data,
                        backgroundColor: "rgba(75, 192, 192, 0.5)",
                        borderColor: "rgba(75, 192, 192, 1)",
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    }
                }
            });
        }

        function updateCategoryChart(labels, data) {
            if (categoryChart) categoryChart.destroy();
            const ctx = document.getElementById("categoryChart").getContext("2d");

            categoryChart = new Chart(ctx, {
                type: "pie",
                data: {
                    labels: labels,
                    datasets: [{
                        label: "Sales",
                        data: data,
                        backgroundColor: [
                            'rgba(54, 162, 235, 0.7)',
                            'rgba(255, 99, 132, 0.7)',
                            'rgba(255, 206, 86, 0.7)',
                            'rgba(75, 192, 192, 0.7)',
                            'rgba(153, 102, 255, 0.7)',
                            'rgba(255, 159, 64, 0.7)',
                            'rgba(199, 199, 199, 0.7)',
                            'rgba(83, 102, 255, 0.7)',
                            'rgba(40, 159, 64, 0.7)',
                            'rgba(210, 199, 199, 0.7)'
                        ],
                        borderColor: [
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)',
                            'rgba(199, 199, 199, 1)',
                            'rgba(83, 102, 255, 1)',
                            'rgba(40, 159, 64, 1)',
                            'rgba(210, 199, 199, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                boxWidth: 15
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    const label = context.label || '';
                                    const value = context.parsed || 0;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }

        function updateBrandChart(labels, data) {
            if (brandChart) brandChart.destroy();
            const ctx = document.getElementById("brandChart").getContext("2d");

            // Format data for better display
            const formattedLabels = labels.map(label => 
                label.length > 15 ? label.substring(0, 15) + '...' : label
            );

            brandChart = new Chart(ctx, {
                type: "doughnut",
                data: {
                    labels: formattedLabels,
                    datasets: [{
                        label: "Brand Sales",
                        data: data,
                        backgroundColor: [
                            'rgba(54, 162, 235, 0.7)',
                            'rgba(255, 99, 132, 0.7)',
                            'rgba(255, 206, 86, 0.7)',
                            'rgba(75, 192, 192, 0.7)',
                            'rgba(153, 102, 255, 0.7)'
                        ],
                        borderColor: [
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 99, 132, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                boxWidth: 15
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    const label = labels[context.dataIndex] || '';
                                    const value = context.parsed || 0;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return `${label}: â‚¹${value.toLocaleString()} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }

    
    </script>